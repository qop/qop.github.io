<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>qop&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://qop.github.io/"/>
  <updated>2016-03-25T07:26:23.000Z</updated>
  <id>http://qop.github.io/</id>
  
  <author>
    <name>周中坚</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jsbridge</title>
    <link href="http://qop.github.io/2016/03/16/2016/03-16/"/>
    <id>http://qop.github.io/2016/03/16/2016/03-16/</id>
    <published>2016-03-15T16:00:00.000Z</published>
    <updated>2016-03-25T07:26:23.000Z</updated>
    
    <content type="html">&lt;p&gt;ing&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;ing&lt;/p&gt;

    
    </summary>
    
    
      <category term="jsbridge" scheme="http://qop.github.io/tags/jsbridge/"/>
    
      <category term="前端" scheme="http://qop.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>ci系统</title>
    <link href="http://qop.github.io/2016/03/10/2016/03-10/"/>
    <id>http://qop.github.io/2016/03/10/2016/03-10/</id>
    <published>2016-03-09T16:00:00.000Z</published>
    <updated>2016-03-25T07:26:20.000Z</updated>
    
    <content type="html">&lt;p&gt;一般来说ci要做的事情就是把开发环境的代码构建完之后丢到线上去，这里面ci系统要做哪些事，开哪些口子都得看实际的业务需要，本文只是列举一个比较好的实践。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;读取当前系统环境，打印在日志上方便排查由于环境或者版本造成的问题。&lt;/p&gt;
&lt;figure class=&quot;highlight ocaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;&#39;echo&lt;/span&gt; $&lt;span class=&quot;type&quot;&gt;PATH&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;&#39;node&lt;/span&gt; -v&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;&#39;npm&lt;/span&gt; -v&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;&#39;npm&lt;/span&gt; config get registry&#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;清空destination，此处可以由用户（此处用户指的是ci系统的用户，即业务开发）指定，如果不设置就读取默认配置，比如/dist文件夹。&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;rm&lt;/span&gt; -rf dist&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;跑用户指定的构建脚本，gulp, grunt, webpack等各种方式，输出到/dist即可。这时候/dist里应该有&lt;em&gt;*/&lt;/em&gt;.@(html|js|css|jpg|jpeg|png|gif)这些文件。&lt;/p&gt;
&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;script&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;build&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;gulp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文件名校验，文件名应该由小写字母、数字、分隔符、下划线和点组成。&lt;code&gt;/^[a-z0-9_\-\.\/]+$/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;替换css中引用的相对路径，比如背景图，应该直接引用发到cdn上的静态文件地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;压缩css。不多说了，推荐用clean-css。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;压缩js。不多说，推荐用uglify-js。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;压缩图片。图片推荐用imagemin，有针对jpg, jpeg, png, gif的工具。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;给静态文件加md5。形如/dist/lib/zepto.min.js ==&amp;gt; /dist/lib/zepto.min.md5.js&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;替换html中引用静态资源的相对路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;上传ftp。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更新数据库版本号。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;一般来说ci要做的事情就是把开发环境的代码构建完之后丢到线上去，这里面ci系统要做哪些事，开哪些口子都得看实际的业务需要，本文只是列举一个比较好的实践。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;读取当前系统环境，打印在日志上方便排查由于环境或者版本造成的问题。&lt;/p&gt;
&lt;figur
    
    </summary>
    
    
      <category term="ci" scheme="http://qop.github.io/tags/ci/"/>
    
      <category term="nodejs" scheme="http://qop.github.io/tags/nodejs/"/>
    
      <category term="前端" scheme="http://qop.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫(一)</title>
    <link href="http://qop.github.io/2016/02/23/2016/02-23/"/>
    <id>http://qop.github.io/2016/02/23/2016/02-23/</id>
    <published>2016-02-22T16:00:00.000Z</published>
    <updated>2016-03-25T07:26:16.000Z</updated>
    
    <content type="html">&lt;p&gt;之前用python写过一些小工具，非常方便，但是没有系统学习过，所以想带着做一个简单爬虫的目的，系统地学习一下这个语言。&lt;br&gt;TODO&lt;/p&gt;
&lt;p&gt;——————————20160314 太忙了的分割线——————————&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前用python写过一些小工具，非常方便，但是没有系统学习过，所以想带着做一个简单爬虫的目的，系统地学习一下这个语言。&lt;br&gt;TODO&lt;/p&gt;
&lt;p&gt;——————————20160314 太忙了的分割线——————————&lt;/p&gt;

    
    </summary>
    
    
      <category term="python" scheme="http://qop.github.io/tags/python/"/>
    
      <category term="爬虫" scheme="http://qop.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>外卖整合沟通会</title>
    <link href="http://qop.github.io/2015/11/20/2015/11-20/"/>
    <id>http://qop.github.io/2015/11/20/2015/11-20/</id>
    <published>2015-11-19T16:00:00.000Z</published>
    <updated>2016-03-25T07:18:46.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;中美零售业互联网化对比&quot;&gt;&lt;a href=&quot;#中美零售业互联网化对比&quot; class=&quot;headerlink&quot; title=&quot;中美零售业互联网化对比&quot;&gt;&lt;/a&gt;中美零售业互联网化对比&lt;/h2&gt;&lt;p&gt;前十的电商公司，美国只有3家是新兴互联网公司，amazon, ebay, apple，美国的电商市场份额差距不大。&lt;br&gt;中国更符合互联网的721定律。&lt;/p&gt;
&lt;h2 id=&quot;互联网到来时传统零售业对比。&quot;&gt;&lt;a href=&quot;#互联网到来时传统零售业对比。&quot; class=&quot;headerlink&quot; title=&quot;互联网到来时传统零售业对比。&quot;&gt;&lt;/a&gt;互联网到来时传统零售业对比。&lt;/h2&gt;&lt;p&gt;中国央视打广告去二三线城市开店就能赚钱。&lt;br&gt;美国公司的增长点基本来自全球化或者国家经历形式走强。&lt;/p&gt;
&lt;h2 id=&quot;外卖业务在中美环境下的差异性&quot;&gt;&lt;a href=&quot;#外卖业务在中美环境下的差异性&quot; class=&quot;headerlink&quot; title=&quot;外卖业务在中美环境下的差异性&quot;&gt;&lt;/a&gt;外卖业务在中美环境下的差异性&lt;/h2&gt;&lt;p&gt;人口密度，人力成本，商家sku，人口数量。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;中美零售业互联网化对比&quot;&gt;&lt;a href=&quot;#中美零售业互联网化对比&quot; class=&quot;headerlink&quot; title=&quot;中美零售业互联网化对比&quot;&gt;&lt;/a&gt;中美零售业互联网化对比&lt;/h2&gt;&lt;p&gt;前十的电商公司，美国只有3家是新兴互联网公司，amazon, eba
    
    </summary>
    
    
      <category term="O2O" scheme="http://qop.github.io/tags/O2O/"/>
    
  </entry>
  
  <entry>
    <title>面试</title>
    <link href="http://qop.github.io/2015/10/28/2015/10-28/"/>
    <id>http://qop.github.io/2015/10/28/2015/10-28/</id>
    <published>2015-10-27T16:00:00.000Z</published>
    <updated>2016-03-25T07:13:56.000Z</updated>
    
    <content type="html">&lt;p&gt;最近招人经常需要面试，大概整理下面试的思路。&lt;/p&gt;
&lt;h3 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h3&gt;&lt;p&gt;HTML&lt;br&gt;CSS&lt;br&gt;javascript&lt;br&gt;DOM &amp;amp; BOM基础知识&lt;/p&gt;
&lt;h3 id=&quot;进阶知识&quot;&gt;&lt;a href=&quot;#进阶知识&quot; class=&quot;headerlink&quot; title=&quot;进阶知识&quot;&gt;&lt;/a&gt;进阶知识&lt;/h3&gt;&lt;p&gt;持续集成&lt;br&gt;前端工程化&lt;br&gt;渐进增强与平稳退化&lt;br&gt;操作系统-linux&lt;br&gt;git&lt;br&gt;浏览器&lt;br&gt;网络-HTTP&lt;br&gt;算法&lt;br&gt;设计模式&lt;br&gt;hybrid框架&lt;br&gt;移动端开发&lt;/p&gt;
&lt;h3 id=&quot;前端新技术&quot;&gt;&lt;a href=&quot;#前端新技术&quot; class=&quot;headerlink&quot; title=&quot;前端新技术&quot;&gt;&lt;/a&gt;前端新技术&lt;/h3&gt;&lt;p&gt;ES6&lt;br&gt;angularJS&lt;br&gt;react&lt;/p&gt;
&lt;p&gt;具体内容可参考：&lt;a href=&quot;!https://mdluo.github.io/blog/about-front-end-interview/&quot;&gt;关于前端面试&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近招人经常需要面试，大概整理下面试的思路。&lt;/p&gt;
&lt;h3 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h3&gt;&lt;p&gt;HTML&lt;br&gt;CSS&lt;br&gt;javascript&lt;br&gt;DOM
    
    </summary>
    
    
      <category term="前端" scheme="http://qop.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端分享</title>
    <link href="http://qop.github.io/2015/06/23/2015/06-23/"/>
    <id>http://qop.github.io/2015/06/23/2015/06-23/</id>
    <published>2015-06-22T16:00:00.000Z</published>
    <updated>2016-03-25T07:14:54.000Z</updated>
    
    <content type="html">&lt;p&gt;频度：每两周一次&lt;br&gt;时间：安排在每个迭代结束的周五下午，时长控制在1-2小时&lt;br&gt;流程：内容讲解，QA，开脑洞&lt;br&gt;形式：可以但不仅限于ppt、浏览器、ide&lt;br&gt;内容：新技术或者设计的学习分享（比如reactjs、angularjs、ES6中的新特性、html5和css3等），系统级分享（比如前端缓存方案、前端性能优化、cdn原理、bigpipe、前后端分离、gulpjs等前端工程化工具等），经验分享（jsbridge设计与实现，photoshop，灵活的html，比较大的前端项目的开发经验和踩过的坑），标准解读（js中经常被误解误用的一些概念）&lt;br&gt;主题及标准：每个人都可以提，随时更新主题，鼓励学习各种欣欣向荣的新技术，如果能转化到生产环境更好。&lt;br&gt;流程：主持人提前一个月联系分享人并确定分享内容，并负责订会议室买水果饮料（如果有经费- -）等后勤工作，分享人会前或者会后发出相关材料。&lt;br&gt;评价标准：NPS。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;频度：每两周一次&lt;br&gt;时间：安排在每个迭代结束的周五下午，时长控制在1-2小时&lt;br&gt;流程：内容讲解，QA，开脑洞&lt;br&gt;形式：可以但不仅限于ppt、浏览器、ide&lt;br&gt;内容：新技术或者设计的学习分享（比如reactjs、angularjs、ES6中的新特性、html5
    
    </summary>
    
    
      <category term="前端" scheme="http://qop.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>2014年终总结</title>
    <link href="http://qop.github.io/2015/01/01/2015/01-01/"/>
    <id>http://qop.github.io/2015/01/01/2015/01-01/</id>
    <published>2014-12-31T16:00:00.000Z</published>
    <updated>2016-02-23T08:13:08.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;工作第二年&quot;&gt;&lt;a href=&quot;#工作第二年&quot; class=&quot;headerlink&quot; title=&quot;工作第二年&quot;&gt;&lt;/a&gt;工作第二年&lt;/h2&gt;&lt;p&gt;2014年，工作还是最重要且最紧急的。&lt;/p&gt;
&lt;p&gt;专业技能上有了——爬上一个山坡，看到无数个山坡——的感觉，2015年我需要更加专注。&lt;br&gt;相应的，心态可以调整到一个平稳的状态。知道什么东西可以实现，怎么实现，知道什么东西不能实现。也就不会因为一个bug而睡不着觉，也不会因为无知而轻易下不靠谱的结论。&lt;/p&gt;
&lt;p&gt;职业素养上更是有了翻天覆地的变化。比如发邮件，年初的时候我还有过和别人争论，然后发群邮件公开指责的行为。也许讨论的事情本身我没有错，但是发邮件这种事我是错了。&lt;br&gt;现在的我，可以跳出自身的局限，看到别人的需求，可以写出直指问题却让各方都看着舒服的邮件了。&lt;br&gt;这块的缺点是还不够积极主动，2015要更多地做一个发起者，而不是执行者。&lt;/p&gt;
&lt;p&gt;员工在工作中有专业技能和职业素养上的提升，物质上的回报就是自然而然的了。加入点评以来的第三次绩效考核分别是B、B+和A，希望今年有个好收成。（不过公司向来小气）&lt;/p&gt;
&lt;h3 id=&quot;经济独立&quot;&gt;&lt;a href=&quot;#经济独立&quot; class=&quot;headerlink&quot; title=&quot;经济独立&quot;&gt;&lt;/a&gt;经济独立&lt;/h3&gt;&lt;p&gt;当初来上海还从家拿了安家费，但是拿了第二个月工资之后就可以自称经济独立了。&lt;br&gt;后来支付宝推出了余额宝，立刻去谷歌余额宝以及货币基金，第二天就把所有的钱转进去了。&lt;/p&gt;
&lt;p&gt;然后来到今年，知道了各种货币、债券、混合、股票基金，p2p，股票，贵金属，外汇的特点，把承受能力从每天看着余额宝几块十几块的收益变成了每天盈亏一两千。&lt;br&gt;2014最重要的不是靠理财赚钱了，而是有了更成熟的理财观念及知识。&lt;/p&gt;
&lt;p&gt;很早就听说一个支持贷款买房的观点，就是房贷是一个普通人这辈子可以获得的最大的现金流，以及不错的利率，所以即使能全款买房，也应该贷款。当时不明所以，而且短期内自己也不会有稳定的能跑赢利率加上CPI的理财能力，但是这个观点算是清楚明白了。&lt;/p&gt;
&lt;h3 id=&quot;看书&quot;&gt;&lt;a href=&quot;#看书&quot; class=&quot;headerlink&quot; title=&quot;看书&quot;&gt;&lt;/a&gt;看书&lt;/h3&gt;&lt;p&gt;从豆瓣读书的统计来看，2014年的阅读量跌入低谷。但是翻完豆瓣阅读就释然了，在线阅读的量应该不下于2013年的纸质书。缺点也是有的，看的很多短篇不成体系，还有许多就是知乎问答精选集，看完没有什么收获的。&lt;/p&gt;
&lt;p&gt;阅读量现在在我看来非常无所谓了，因为今年发现了一件非常重要的事情，就是看书得到的知识真的很少（小说什么的另说），做摘抄要好一些，写读书笔记算是不错的，但都比和同样看了这本书的人讨论，或者把你看到的东西讲给别人收获少。&lt;br&gt;这方面看，读书沙龙蛮好的，但是自己没有时间和脸皮混到这种组织里去了。&lt;/p&gt;
&lt;p&gt;希望2015年能更多地与人交流。&lt;/p&gt;
&lt;h3 id=&quot;行路&quot;&gt;&lt;a href=&quot;#行路&quot; class=&quot;headerlink&quot; title=&quot;行路&quot;&gt;&lt;/a&gt;行路&lt;/h3&gt;&lt;p&gt;2014宅的比较多，除了公司组织的莫干山和汤山温泉，就去了宁波舟山，回了一趟武汉，去了一个冷门景点覆卮山。计划许久的新加坡及东南亚之行因为种种原因未能成行。&lt;/p&gt;
&lt;h3 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h3&gt;&lt;p&gt;2014年初的时候结束了一段短暂的感情，因为那不是我想要的生活。&lt;br&gt;其他也不知道说什么了，就这样吧。&lt;/p&gt;
&lt;p&gt;别人总是在欢快的气氛中跨年，而我却连续四年沉浸在一种莫名的情绪中。不知道为什么想到了某夜和大锅对独身主义的讨论，其实很多人只是无法把握自己的生活吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;工作第二年&quot;&gt;&lt;a href=&quot;#工作第二年&quot; class=&quot;headerlink&quot; title=&quot;工作第二年&quot;&gt;&lt;/a&gt;工作第二年&lt;/h2&gt;&lt;p&gt;2014年，工作还是最重要且最紧急的。&lt;/p&gt;
&lt;p&gt;专业技能上有了——爬上一个山坡，看到无数个山坡——的感觉，20
    
    </summary>
    
    
      <category term="年终总结" scheme="http://qop.github.io/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>on the road</title>
    <link href="http://qop.github.io/2014/10/31/2014/10-31/"/>
    <id>http://qop.github.io/2014/10/31/2014/10-31/</id>
    <published>2014-10-30T16:00:00.000Z</published>
    <updated>2016-02-23T09:40:37.000Z</updated>
    
    <content type="html">&lt;p&gt;工作这几年是否窥探到一丝行业发展的趋势，我们究竟是被时代甩在后面还是紧紧抓住缰绳？有很多话却开不了口，什么时候才能脱离知道、了解的层次，窥到门道。&lt;/p&gt;
&lt;p&gt;我所处的行业在中国不过十年，我的专业方向不过五年，刀耕火种的时代已经过去了。我，做好准备了吗？&lt;/p&gt;
&lt;p&gt;上周末去杭州参加D2，感触蛮多的，但是好忙，也没有时间思考。&lt;/p&gt;
&lt;p&gt;D2给我最大的感受是，互联网公司在前端碰到的问题都是类似的，听别人的分享会感觉，这个我们公司也有，但是自己想解决的问题以及设计理念甚至当中的利弊权衡，就没什么头绪了。这还算不得入门吧。&lt;/p&gt;
&lt;p&gt;然后，前端是学习容易，精通很难的方向，范围之博杂可类比杨过的武学之路。现在很时髦的概念，全栈，虽然有点违背分工，但是看过人月神话就会了解其中的必然性。前端是最适合全栈的专业没有之一！向后有nodejs和mongodb支持，向前容易弄懂app界面以及UED，移动端还有hybrid。是非常适合发展为独立开发者的。&lt;/p&gt;
&lt;p&gt;前端本身的知识就很多，还要懂这么多交叉知识，路漫漫其修远兮…&lt;/p&gt;
&lt;p&gt;这周是部门业务调整的转型期，快要忙碌的忘记了日子，直到接到一个猎头电话，我居然没有向往常一样婉拒，虽然地点以及要求不是那么match，但还是准备做一份简历去聊聊。接触更大的世界，更多的人，不一定会合作，但总有裨益。&lt;/p&gt;
&lt;p&gt;周四加班的时候偶然间review了以前写的代码，感觉自己进步蛮大的，有点模模糊糊的入轨的感觉，希望不是错觉:P&lt;/p&gt;
&lt;p&gt;慢慢酝酿的东西可能是美酒，也可能是馊了。&lt;/p&gt;
&lt;p&gt;饥饿，混着雨水和汗水的衣服，让人晕沉的大巴，劫后余生之后慢慢平复下的心情，以及对明天的期盼。&lt;/p&gt;
&lt;p&gt;车开了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2014-ontheroad.jpg&quot; alt=&quot;on the road&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;工作这几年是否窥探到一丝行业发展的趋势，我们究竟是被时代甩在后面还是紧紧抓住缰绳？有很多话却开不了口，什么时候才能脱离知道、了解的层次，窥到门道。&lt;/p&gt;
&lt;p&gt;我所处的行业在中国不过十年，我的专业方向不过五年，刀耕火种的时代已经过去了。我，做好准备了吗？&lt;/p&gt;
&lt;p&gt;上
    
    </summary>
    
    
      <category term="互联网" scheme="http://qop.github.io/tags/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
      <category term="碎碎念" scheme="http://qop.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>也说视频网站</title>
    <link href="http://qop.github.io/2014/09/21/2014/09-21/"/>
    <id>http://qop.github.io/2014/09/21/2014/09-21/</id>
    <published>2014-09-20T16:00:00.000Z</published>
    <updated>2016-02-23T08:13:08.000Z</updated>
    
    <content type="html">&lt;p&gt;　　也说互联网最初的赚钱模式——广告。&lt;/p&gt;
&lt;p&gt;　　随着习惯的变化，越来越多人看视频的场景由pc转到了移动端。对于我也是如此，所以原来在pc端很好用的一些禁广告插件现在用不了了。眼看着优酷等主流视频网站把广告时长由15秒，30秒调整到丧心病狂的一分钟。——于是我成为了优酷会员。。。&lt;br&gt;　　体验了几天之后发现，会员除了不用看广告，其他的服务都极为鸡肋，而广告本身对用户却毫无价值。其实广告可以做的更加智能。后台可以进行数据挖掘，找到用户关注的内容，定向投放。前台可以像豆瓣电台一样做红心和垃圾箱（youtube的跳过），用户可以不断调教自己的视频广告，这样体验上来了，效果也上来了。理想的场景是100个人，20个人看A广告，20个人看B广告，30个人看C广告，也许有30个人啥都不看。目前的情况是100个人，每人分别有30%、30%、40%的概率看到A广告、B广告、C广告。&lt;br&gt;　　不过话说回来，广告投放系统极为复杂，效果这个东西短期内也不好量化，对急功近利的大环境来说，要做到很难。&lt;/p&gt;
&lt;p&gt;　　当然了，也有这方面做的很好的。&lt;br&gt;　　举例来说，点评的广告位是很值钱的，CPM收费可以达到一般网站的十倍甚至100倍，因为效果好。为何效果好呢，原因有二：点评用户的质量高（客单价高，以及用户忠诚度比较高）；点评用户的诉求很明确，和来投放广告的餐饮娱乐业极为吻合，CPM可以达到CPA的效果。再看看youtube，因为背后站着谷歌，所以猜想广告的订制性一定是极好的（没怎么用过，依据谷歌本身的广告投放技术猜测）。而且youtube还自信到开放用户关闭广告的权限。&lt;/p&gt;
&lt;p&gt;　　此外，优酷推出的会员加付费视频的模式可类比于app store上的付费下载加内购，这种模式是非常好的。但是优酷的推广做的比较一般，目前的两个活动分别是：开通支付宝自动续费，三个月返50元红包，相当于3个月10块钱，当然要记得取消自动续费。另一个活动是一次性开通三个月会员返50元话费。&lt;br&gt;　　感觉到活动最大的问题是，没有用户会想到开着支付宝看视频——即用户属性不一致。优酷最天然的朋友应该是社交属性强大的腾讯，无奈腾讯有自己的视频业务，所以只好和支付宝合作。&lt;br&gt;　　这方面另一个反例就是点评了，之前鼓吹得那么厉害的价值几个亿的微信入口，一个月只给点评带来几十万成交额。可惜阿里本身是要做O2O的，没办法和支付宝合作，不然想象一下在支付宝推点评的业务是多么美如画吖。&lt;br&gt;　　有一个正面的例子是迅雷增值服务，三四年前推出的云播、离线下载及高速通道加速，在大量提供『试用会员』的对比下将增值服务开展得如火如荼。ps：那段时间不用会员下不动确实是比较猥琐却又难以发现的黑手。&lt;/p&gt;
&lt;p&gt;　　说了那么多做的不好的，不得不提视频网站的无奈之处：法律对视频版权的约束和习惯于盗版的网民之间不可调和的矛盾。现在最赚钱的内容应该是各种电视剧了，所以内容必须要新且全，但是目前付费用户数量不足以cover这块支出。so…&lt;br&gt;　　这方面豆瓣阅读已经形成了非常好的生态圈，用极大的利益抓住优质的（独家）内容提供者，用多平台良好的用户体验抓住用户，再加上豆瓣用户质量本身比较高，所以豆瓣阅读仅凭自然增长就已经欣欣向荣了。&lt;br&gt;　　我之前说过，互联网最根本最彻底的赚钱模式是革传统行业的命。视频网站正是如此，越来越多的人抛弃电视转向在线视频，所以一定是有前（钱）途的。&lt;br&gt;　　在网络带宽这个方面，时机是成熟了，但是用户习惯还有很长的路要走。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　也说互联网最初的赚钱模式——广告。&lt;/p&gt;
&lt;p&gt;　　随着习惯的变化，越来越多人看视频的场景由pc转到了移动端。对于我也是如此，所以原来在pc端很好用的一些禁广告插件现在用不了了。眼看着优酷等主流视频网站把广告时长由15秒，30秒调整到丧心病狂的一分钟。——于是我成为了
    
    </summary>
    
    
      <category term="互联网" scheme="http://qop.github.io/tags/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
      <category term="优酷" scheme="http://qop.github.io/tags/%E4%BC%98%E9%85%B7/"/>
    
      <category term="广告" scheme="http://qop.github.io/tags/%E5%B9%BF%E5%91%8A/"/>
    
      <category term="流量" scheme="http://qop.github.io/tags/%E6%B5%81%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>关于社会阶层的一点浅薄理解</title>
    <link href="http://qop.github.io/2014/08/03/2014/08-03/"/>
    <id>http://qop.github.io/2014/08/03/2014/08-03/</id>
    <published>2014-08-02T16:00:00.000Z</published>
    <updated>2016-02-23T08:13:08.000Z</updated>
    
    <content type="html">&lt;p&gt;　　记得本科的时候看到过一篇『中国社会阶层划分』的帖子，当时奉为真理，但是过了这么长的时间，经过看山不是山，看山还是山的变化，终于有了更多理性的认识。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;缘于今天下午群里讨论才知道初高中同学有这么多富二代官二代，可惜『壕友乎』的人貌似都玩不来，当然了，别人都是有自己的圈子的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;那些父辈们的积累，不论是资源、经济还是人脉都提供了更高的起点，有的人少100分能上985，有人毕业一两年就能当分行行长，这些先天鸿沟之巨大也许要穷尽一生的奋斗才能追上。&lt;br&gt;比如体制内，公务员家庭的孩子自然得到更多这方面的培养，甚至从高中开始就进行职业规划，读完本科顺理成章地走上仕途。&lt;br&gt;比如资本家（无贬义），有些人通过资本运作就能轻松财务自由，比如收房租月入数万，比如继承了家族产业。&lt;br&gt;比如国家电网家庭的孩子，高考专业就填电气，随便混个证书，回来就能安排个钱多事少离家近的工作，更别提以后加薪升迁都有人罩了。&lt;br&gt;像我这种野蛮生长的人直到高考结束出了分要填志愿了还不知道自己要干嘛。好在我误打误撞进入了一个让人激昂的行业，这个行业有着无法比拟的魅力，见下文。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;健康的社会阶层是纺锤形，下面有少量无家可归的人，顶上是有话语权的当权者，而白领、工程师努力一点可以达到中产。中产下面一点是基数庞大的工薪阶层。&lt;br&gt;阶层的通道很狭窄，但是并非不可能，大部分人奋斗一生也只能够上升一个阶层，这已经是其中的佼佼者了，当然，不排除少数天才由白手起家到世界首富，从一无所有到大权在握。&lt;br&gt;在阶层划分的角度，先天差异是后天努力所不能弥补的，比如治博拿了华为的offer，那么拿华为举例，可分为任正非为首的最高管理层，占据一定比例的的中层管理者和技术牛人，数量庞大的一线工程师这三层。可以预见的是治博作为一个工程师，可能成长为一个技术牛人（跨一层），但是做不到公司董事会（跨两层）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;阶层的固化会滋生腐败，钱权勾结。&lt;br&gt;对于封建社会来讲，有了科举这个非常科学的渠道，可以让上下层进行一定的流通，是保证权力健康的一种方式（监察等机制不谈），所以科举是有划时代意义的。可以类比今天的高考，我也认为高考可以说是当今社会最公平的事情了。&lt;br&gt;但是一旦阶层固化的恶果达到一定程度，纺锤型变为金字塔型，加上上下沟通无力，配合天时（瘟疫饥荒等），立刻就能带来农民（社会最底层）起义。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;阶层的稳固也有一定的积极意义。&lt;br&gt;可以对比机会平等和结果平等。机会平等主张市场经济小政府，人与人之间无差别地自由竞争，主张教育医疗自理按劳分配。结果平等代表完全的社会主义，高税收高福利大政府，由国家补贴均衡人与人之间的差距，主张全民医保教育按需分配。&lt;br&gt;在绝对的机会平等之下，贫富差距会瞬间拉大，社会陷入巨大的动荡之中。&lt;br&gt;而在绝对的结果平等之下，社会死气沉沉，生产力底下。&lt;br&gt;一方面机会平等可以增加上下阶层的流通，但是却带来社会动荡，此时适当的结果平等可以稳固社会的底层。&lt;br&gt;另一方面结果平等可以让所有人不思进取，社会结构迅速扁平，整体生产力下降。——这里思维有点乱，有点辞不达义。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在中国社会的大多数行业，资源和经济带来的鸿沟都是很难抹平的。&lt;br&gt;唯有——这是一段心酸的对话：—IT不拼爹。—但是IT拼命啊。—没爹拼只有拼命咯。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为什么IT不拼爹。&lt;br&gt;战争和性是旧社会财富再分配的两种基本形式，现代社会可能会好一点，多了很多技术岗位，但是依然有很大的局限性。&lt;br&gt;互联网其实属于『有技术含量可爆发增长的』服务业。&lt;br&gt;不像摊蛋饼努力点收入多几成，上限也摆在那里。为什么互联网造富，因为这行没有沉淀，没有（那么厉害的）资源上的垄断。不断创新发掘增长点，解放生产力，或者说革传统行业的命。比如，电商对传统零售业的打击，可类比18世纪英国纺织机对手工业的打击。一下子效率提高几倍十几倍，传统行业的利润就会到互联网行业。年轻的行业伴随着的就是『战争』。&lt;br&gt;至于有技术含量，这是互联网不拼爹的另一个条件了。因为知识这个东西无法继承，老爹学习好孩子不一定就会编程。&lt;br&gt;可以预见的是，如果哪天互联网没有创新了，过不了多久，也不再适合拼搏。——其实互联网的黄金年代已经过去了，君不见BAT各种垄断或者收购。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其实认清自己的阶层也没有多大的不好，毕竟幸福感和钱或者权没有太大的关系，然后在自己力所能及的范围内进行奋斗就好了。对于没有爹可拼的一众葫芦娃来说，达到中产这辈子也算是成功了吧。再往上一点就是财务自由，做自己觉得更有个人价值或者社会价值的事情。&lt;br&gt;不过通过资本积累达到财务自由对我们几乎不可能，除非创业获得爆发式增长。但是财务自由和收入关系不是那么大的，限定在超市自由，适当降低自己的欲望，还是可能做到的。相对的，富裕家庭如果有个天天买lv的子女也无法财务自由。&lt;br&gt;最后，以上只是讨论一种可行性，实际还是很难。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　记得本科的时候看到过一篇『中国社会阶层划分』的帖子，当时奉为真理，但是过了这么长的时间，经过看山不是山，看山还是山的变化，终于有了更多理性的认识。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;缘于今天下午群里讨论才知道初高中同学有这么多富二代官二代，可惜『壕友乎』的人貌似都玩不来，
    
    </summary>
    
    
      <category term="阶层" scheme="http://qop.github.io/tags/%E9%98%B6%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>Best Practices for Speeding Up Your Web Site</title>
    <link href="http://qop.github.io/2014/07/26/2014/07-26/"/>
    <id>http://qop.github.io/2014/07/26/2014/07-26/</id>
    <published>2014-07-25T16:00:00.000Z</published>
    <updated>2016-03-25T07:25:30.000Z</updated>
    
    <content type="html">&lt;p&gt;Make Fewer HTTP Requests&lt;br&gt;Use a Content Delivery Network&lt;br&gt;Add an Expires or a Cache-Control Header&lt;br&gt;Gzip Components&lt;br&gt;Put Stylesheets at the Top&lt;br&gt;Put Scripts at the Bottom&lt;br&gt;Avoid CSS Expressions&lt;br&gt;Make JavaScript and CSS External&lt;br&gt;Reduce DNS Lookups&lt;br&gt;Minify JavaScript and CSS&lt;br&gt;Avoid Redirects&lt;br&gt;Remove Duplicate Scripts&lt;br&gt;Configure ETags&lt;br&gt;Make Ajax Cacheable&lt;br&gt;Flush the Buffer Early&lt;br&gt;Use GET for AJAX Requests&lt;br&gt;Post-load Components&lt;br&gt;Preload Components&lt;br&gt;Reduce the Number of DOM Elements&lt;br&gt;Split Components Across Domains&lt;br&gt;Minimize the Number of iframes&lt;br&gt;No 404s&lt;br&gt;Reduce Cookie Size&lt;br&gt;Use Cookie-free Domains for Components&lt;br&gt;Minimize DOM Access&lt;br&gt;Develop Smart Event Handlers&lt;br&gt;Choose &lt;link&gt; over @import&lt;br&gt;Avoid Filters&lt;br&gt;Optimize Images&lt;br&gt;Optimize CSS Sprites&lt;br&gt;Don’ t Scale Images in HTML&lt;br&gt;Make favicon.ico Small and Cacheable&lt;br&gt;Keep Components under 25K&lt;br&gt;Pack Components into a Multipart Document&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Make Fewer HTTP Requests&lt;br&gt;Use a Content Delivery Network&lt;br&gt;Add an Expires or a Cache-Control Header&lt;br&gt;Gzip Components&lt;br&gt;Put Styleshe
    
    </summary>
    
    
      <category term="前端" scheme="http://qop.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="转载" scheme="http://qop.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>碎碎念</title>
    <link href="http://qop.github.io/2014/07/17/2014/07-17/"/>
    <id>http://qop.github.io/2014/07/17/2014/07-17/</id>
    <published>2014-07-16T16:00:00.000Z</published>
    <updated>2016-02-23T08:13:08.000Z</updated>
    
    <content type="html">&lt;p&gt;　　已删除&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　已删除&lt;/p&gt;

    
    </summary>
    
    
      <category term="碎碎念" scheme="http://qop.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>博彩和德州扑克</title>
    <link href="http://qop.github.io/2014/07/16/2014/07-16/"/>
    <id>http://qop.github.io/2014/07/16/2014/07-16/</id>
    <published>2014-07-15T16:00:00.000Z</published>
    <updated>2016-02-23T08:13:08.000Z</updated>
    
    <content type="html">&lt;p&gt;　　随着世界杯落下帷幕，终于成就了四星德国，不枉我从02年开始喜欢他们。&lt;br&gt;　　德意志真是很有意思的名族，足球史上的经验告诉大家，领先时最不能松懈的对手就是德国，因为他们有无数经典的翻盘，因为他们的坚韧不拔。这也是大多数早期伪球迷喜欢他们的原因吧，而现在的德国伪球迷成因大概是德国·男模·队。&lt;br&gt;　　一个小调查告诉大家，德国人对其他国家的好感在世界范畴内是最低的，但是其他国家的人民对德国的好感却是最高的——看，多么傲娇的民族。&lt;br&gt;　　扯回世界杯，除了精彩的足球，还有刺激的足彩。坡县的广告『I hope Germany wins. My dad bet all my savings on them.』被无数网友转载。足彩真是刺激，成就了多少百万富翁，在开赛前他们还是千万富翁呢。&lt;/p&gt;
&lt;p&gt;　　稍微统计了一下我足彩的收支，下一倍的彩票花了60，赚回93，下多倍的彩票花了300，赚回20，看来注定是没有发横财的命啊。&lt;br&gt;　　想起去年foosball比赛取得亚军获得的号称价值30万的奖品——一注10块钱的刮刮乐，还真给我刮出了500块（结果请客吃饭花了700，真是亏大了）。周围有不少买彩票的，我也研究过一些彩票投注窍门之类的，发现有很多人靠这个吃饭，整天发攻略和预测，更有甚者还出了书。但是看了几眼就发现，他们都是在搬弄概率，而且是最基本的古典概率，却不告诉受众一个最基本的事实，彩票的每次开奖是独立事件。&lt;br&gt;　　后来更是发现了一个惊天阴谋——双色球开奖的录播的，而且总是奖池累积很高之后被神秘男子全部刮走。此后就再也不买双色球，而且保持了好的购彩心态——下注的钱就当是掉了，赚回来的钱当是捡到的，所以下注不多从不心疼。&lt;/p&gt;
&lt;p&gt;　　相比而言德州扑克才是有技术含量的赌博。&lt;br&gt;　　需要理解概率；需要在不完全的信息之下决策；需要在牌好时下重注，牌差时不下注；需要风险控制——牌好时都不能孤注一掷，牌差时要及时止损；要懂自己，避免恐惧和贪婪；要懂对手，知道谁打得松谁打得紧。&lt;br&gt;　　自己最初的技能只有『概率论』，但是玩了几次逐渐找到一种感觉：不论筹码的多少，时刻保持理智，不能因为筹码多而乱下注，不能因为筹码少就没心气。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　随着世界杯落下帷幕，终于成就了四星德国，不枉我从02年开始喜欢他们。&lt;br&gt;　　德意志真是很有意思的名族，足球史上的经验告诉大家，领先时最不能松懈的对手就是德国，因为他们有无数经典的翻盘，因为他们的坚韧不拔。这也是大多数早期伪球迷喜欢他们的原因吧，而现在的德国伪球迷成因
    
    </summary>
    
    
      <category term="德州扑克" scheme="http://qop.github.io/tags/%E5%BE%B7%E5%B7%9E%E6%89%91%E5%85%8B/"/>
    
      <category term="碎碎念" scheme="http://qop.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>也说知乎</title>
    <link href="http://qop.github.io/2014/06/15/2014/06-15/"/>
    <id>http://qop.github.io/2014/06/15/2014/06-15/</id>
    <published>2014-06-14T16:00:00.000Z</published>
    <updated>2016-02-23T08:13:08.000Z</updated>
    
    <content type="html">&lt;p&gt;　　最近发现好多人关注知乎，恰好我也是知乎重度用户以及身处互联网行业的浪潮粉丝，而且前天知乎宣布完成B轮融资，就来聊聊知乎的困境。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;孙悟空和沙僧&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　在招人方面，知乎是一个逼格挺高的公司，和现在很多互联网公司一样向往谷歌的公司文化。所以带来的现实就是，员工非常有主见（当然是有能力的），以及工作量的低下。&lt;br&gt;　　一般而言，员工有主见自然不是坏事，但是所有人都这么有主见，人人都是孙悟空，没有务实的沙僧，那么这个团队一定是不稳定的。耳闻有不少知乎员工干了不久就离职，大部分倒不是对公司不满，有人离职去创业，有人去了美国，更有甚至回学校读博了。你想一个创业型团队，每个人都是不可替代的，一个人走了，那么这块东西谁能短期内接下来呢，况且互联网行业招人和交接的成本又是那么巨大。&lt;br&gt;　　从各种正面和侧面的消息得知，知乎的员工非常轻松，吃完午饭去上班的不在少数，而且晚上也不怎么加班，这让大部分创业型团队情何以堪。（@涵涵，请现身说法。）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;烧钱和赚钱&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　上面说到的轻松，其实是有根源的，那就是知乎的生存环境。&lt;br&gt;　　不得不说，知乎是一个不怎么烧钱的公司，算来算去，公司的成本就三块：房租服务器等硬件、员工薪酬、运营活动。而第三块基本可以用众包出书、和豆瓣电子书合作、找赞助商（线下活动）、广告等cover掉。&lt;br&gt;　　前天知乎宣布完成2200万美元的B轮融资，如果按现在的成本算，这么多钱够知乎活好几年的了。&lt;br&gt;　　虽然知乎不那么急着赚钱，但是到现在连盈利模式的影子都还没看到。&lt;br&gt;　　互联网行业最赚钱的当属网游，现在新兴的页游和手游也是增长很快。虽然电商的规模还远没有到传统零售业的1%，但是京东上市都让人看到他是有赚钱能力的，阿里就更不用谈了。O2O虽然还没听说赚钱的，但是大家都知道这是当下的热点——至少有清晰的盈利模式。&lt;br&gt;　　从某种程度上说，赚钱和烧钱是相辅相成的。看看现在烧钱的公司，比如京东搞一次大促自己要花多少钱，比如打车软件都补贴几个亿进去了，比如O2O行业要养活大量的销售运营团队。但是他们一定会赚钱——至少资本家们这么想。&lt;br&gt;　　因为在大家看来，烧钱是一种培养用户习惯的方式，虽然现在市场不成熟，但是未来一定广阔。知乎没有竞争，甚至烧钱的地方都没有，也暂时看不到赚钱的希望。知乎不急，因为还有大量的时间和金钱，还可以不断探索和尝试。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数量和质量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　任何一个ugc的网站都会面临这种问题，开放在带来用户数量提升的同时也会带来内容质量的下降，在知乎的体现就是：&lt;br&gt;　　抖机灵和吐槽的答案越来越多，而且普遍都容易获得高票数，知乎的『赞同数』不再那么有参考性，一个答案下面大部分的回答其实是没有用的。知乎的论坛化越来越严重，与知乎宣扬的『知乎 - 与世界分享你的知识、经验和见解』愈发背道而驰。&lt;br&gt;　　在数量和质量这个问题上，知乎有一些不错的尝试。早期的知乎日报虽然是为了推广知乎设计的，但是放在今天也依然适用，因为将优质的内容提取出来，树立知乎的正面形象，对贡献内容的用户也是激励。——话说我也有回答上过XD&lt;br&gt;　　知乎周刊·豆瓣阅读是很棒的合作，因为豆瓣和知乎的用户重合度还是很高的，拉来豆瓣的用户，提供优质的内容，传播口碑。&lt;br&gt;　　知乎圆桌、知乎专栏等都是好的尝试，这些从某种程度上提高了门槛，将生产优质内容的概率提高了。&lt;br&gt;　　但是抄袭现象、言语上的争斗和审查制度对用户，尤其是比例很低的核心用户——内容贡献者，的伤害是很大的。虽然在这个国度，这样的制度是无法避免的，但是知乎没有用心地从产品层面解决这个问题，最直接的例子就是修改一个答案或者文章，哪怕是一个标点符号，如果可能有敏感词，都要完全地进行重新审查，可能一等就是几个小时。&lt;br&gt;　　而且不得不说的是知乎的搜索真的很烂，搜索出来的内容大部分是无用的，这更加加剧了质量的问题。——因为搜索是一个人做的，而且已经离职- -!&lt;/p&gt;
&lt;p&gt;　　以上都是耳闻和猜测，如有不对，就是我瞎掰。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　最近发现好多人关注知乎，恰好我也是知乎重度用户以及身处互联网行业的浪潮粉丝，而且前天知乎宣布完成B轮融资，就来聊聊知乎的困境。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;孙悟空和沙僧&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　在招人方面，知乎是一个逼格挺高的公司，和现在很多互联网公司一样向往谷歌
    
    </summary>
    
    
      <category term="ugc" scheme="http://qop.github.io/tags/ugc/"/>
    
      <category term="互联网" scheme="http://qop.github.io/tags/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
      <category term="知乎" scheme="http://qop.github.io/tags/%E7%9F%A5%E4%B9%8E/"/>
    
  </entry>
  
  <entry>
    <title>游戏和生活</title>
    <link href="http://qop.github.io/2014/06/08/2014/06-08/"/>
    <id>http://qop.github.io/2014/06/08/2014/06-08/</id>
    <published>2014-06-07T16:00:00.000Z</published>
    <updated>2016-02-23T08:13:08.000Z</updated>
    
    <content type="html">&lt;p&gt;　　最近四周才打了两次dota，虽然操作依旧犀利，走位依旧淫荡，大局观更上一层楼了。但总感觉这个游戏离我渐行渐远了，因为只有在有基友的时候才会去玩它，一局游戏的胜利给我带来的刺激只能稍微抚平无聊生活的寂寞而已。&lt;/p&gt;
&lt;p&gt;　　十年war3，五年dota，这款团队合作型的对抗游戏已经伴随魔兽争霸风光了许久，经历了无数作弊反作弊，会员特权制度和诚信危机，地图的更新换代和节奏变化，排名算法的优化和调整。相比于真三的一成不变，dota没有死在自己手上，但是一定会死在历史的滚滚车轮下。&lt;br&gt;　　从vs到浩方到歪歪，从各种内网到掌门人。掌门人，第一个打通校园网和电信网的对战平台，还有多少人记得呢？加菲盐，第一个优酷dota解说，还有多少人会想起呢？&lt;br&gt;　　说起优酷解说，不得不提到esports海涛和伍声2009。前者开创了将流量（优酷视频解说观众）变现（开淘宝店）的方式。而后者将外设店扩展到了零食店、服装店（利润远超明码标价的电脑外设），甚至服装流水线，从生产、库存到销售、运营都把控在自己手中，经营了自己的品牌，最近还进入传统行业，合伙开了一些定位精准的网咖，结合自己的知名度和影响力，生意甚是红火。&lt;br&gt;　　回想大一开始玩的这款游戏，伴随了多少个日日夜夜，也曾娱乐至上，也曾组队参赛，dota是本科生涯最浓重的一笔，超越了篮球、学习和恋爱。&lt;/p&gt;
&lt;p&gt;　　其实无聊的不是生活，而是生活方式。回头翻翻注册三年的知乎，注册五年的豆瓣，留下了太多的生活痕迹。&lt;br&gt;　　从大四后期（差不多是注册豆瓣之后）开始洗心革面拒绝三国杀和dota，沉浸于阅览室和实验室，开始进入了积极向上却又无比苦闷的生活，我研究生的老板你们懂的。&lt;br&gt;再往前就要翻人人——或者叫校内——了。那时候每天下课就会去人人上灌灌水，分享点图片或者视频，农场里种点菜，发发无聊的状态。&lt;br&gt;　　如果再往前呢，也许要去找腾讯帮我恢复一下qq空间的数据。&lt;br&gt;当然了我还没老到需要缅怀纯真年代或者凤凰花开的日子，只是每段时间都有不同的生活状态，每段时间都有不同的感悟。&lt;/p&gt;
&lt;p&gt;　　其实工作后的自己，险些陷入『一个人』的状态。&lt;br&gt;　　知乎上yol叔有个回答令我非常赞同，是一种话在口边却无法描述的状态，yol叔将之总结为『一个人的状态，总是最糟的』。开心亦或是沮丧都无法与人分享，沙县是吃买菜做菜也是吃，一个人就会荒唐地混日子，一个人不需要对别人负责，一个人死了也不会被惦记。&lt;br&gt;　　虽然没有那么夸张，但是能深切感受到的。一个人，夜深人静不想睡，一个人，不吃饭不锻炼，一个人沮丧彷徨无助。就算去社交网络上发发状态和别人互动一下也好。&lt;br&gt;　　其实『一个人』不是真的『一个人』，比如看书充实自己的内心，比如长跑学会与自己独处，这都不算一个人。当然了，如果有人能打开沉默寡言的你的话匣子，这也是幸运。&lt;br&gt;　　如果你在『一个人』的状态下玩游戏，那就是走火入魔，找三两个基友，开一个小黑店，互相调侃几句，当然要记得『我是在玩游戏，不是被游戏玩』。如果一个人，不妨去菜场和大叔大妈侃侃价，把带回来的食材用心料理一下，或者再简单点，尝试不同食材的配搭打出好喝的果汁。&lt;br&gt;　　毕竟唯美食与爱情不可辜负~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　最近四周才打了两次dota，虽然操作依旧犀利，走位依旧淫荡，大局观更上一层楼了。但总感觉这个游戏离我渐行渐远了，因为只有在有基友的时候才会去玩它，一局游戏的胜利给我带来的刺激只能稍微抚平无聊生活的寂寞而已。&lt;/p&gt;
&lt;p&gt;　　十年war3，五年dota，这款团队合作型的
    
    </summary>
    
    
      <category term="dota" scheme="http://qop.github.io/tags/dota/"/>
    
      <category term="碎碎念" scheme="http://qop.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>移动端页面闪动</title>
    <link href="http://qop.github.io/2014/05/28/2014/05-28/"/>
    <id>http://qop.github.io/2014/05/28/2014/05-28/</id>
    <published>2014-05-27T16:00:00.000Z</published>
    <updated>2016-03-25T07:21:07.000Z</updated>
    
    <content type="html">&lt;p&gt;在用position:absulote+zindex!=0时用transform会偶尔出现页面会闪的现象，解决方法有三：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;-webkit-backface-visibility: hidden;&lt;br&gt;-webkit-perspective: 1000;&lt;br&gt;该方法对于sprite图无效。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;body {-webkit-transform:translate3d(0,0,0);}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;.no-flick{-webkit-transform:translate3d(0,0,0);}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比较多使用的解决方法是 -webkit-backface-visibility: hidden;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在用position:absulote+zindex!=0时用transform会偶尔出现页面会闪的现象，解决方法有三：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;-webkit-backface-visibility: hidden;&lt;br&gt;-webkit-perspective:
    
    </summary>
    
    
      <category term="前端" scheme="http://qop.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="移动端" scheme="http://qop.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>2013年终总结</title>
    <link href="http://qop.github.io/2014/01/31/2014/01-31/"/>
    <id>http://qop.github.io/2014/01/31/2014/01-31/</id>
    <published>2014-01-30T16:00:00.000Z</published>
    <updated>2016-02-23T08:13:08.000Z</updated>
    
    <content type="html">&lt;p&gt;　　夜深人静的时候才会思绪万千，借最近难得的清闲并清醒的时光补上2013年欠下的一个总结。&lt;br&gt;　　2013年对我而言是意义重大，变化很多的一年。这一年我从学校走了出来，一个人到了一个全新的城市开始一段生活，遇到了很多很可爱的人，终于能够经济独立了，还体验了一阵老夫聊发少年狂的快意。&lt;/p&gt;
&lt;h3 id=&quot;趁还没工作多读几本书&quot;&gt;&lt;a href=&quot;#趁还没工作多读几本书&quot; class=&quot;headerlink&quot; title=&quot;趁还没工作多读几本书&quot;&gt;&lt;/a&gt;趁还没工作多读几本书&lt;/h3&gt;&lt;p&gt;　　不知道是真的太忙还是懒了，又或许是生活节奏的压迫，总是让人难以静下心来做些什么，看书、看电影、锻炼身体，2013在这些方面真是糟糕。我想改变首先要从心态做起，有的时候太急了，觉得时间收益太低，但有的事情在心态调整上是可以滚雪球的，所以行为上还是要『立即行动』。&lt;/p&gt;
&lt;h3 id=&quot;你觉得没兴趣可能是因为不够擅长&quot;&gt;&lt;a href=&quot;#你觉得没兴趣可能是因为不够擅长&quot; class=&quot;headerlink&quot; title=&quot;你觉得没兴趣可能是因为不够擅长&quot;&gt;&lt;/a&gt;你觉得没兴趣可能是因为不够擅长&lt;/h3&gt;&lt;p&gt;　　所有在工作上的得与失已经在2013年的KPI自评中写了。但还是要思考，现在的工作能给我带来什么？三年之后我会是在哪里？&lt;br&gt;　　所有现在经历的晨兴理荒秽，带月荷锄归的日子都会是三年后自己生活状态的的注脚。所有现在让我觉得烦恼和痛苦的事儿，都是因为自己不够擅长。&lt;/p&gt;
&lt;h3 id=&quot;又爽又痛又多刺又鲜艳&quot;&gt;&lt;a href=&quot;#又爽又痛又多刺又鲜艳&quot; class=&quot;headerlink&quot; title=&quot;又爽又痛又多刺又鲜艳&quot;&gt;&lt;/a&gt;又爽又痛又多刺又鲜艳&lt;/h3&gt;&lt;h3 id=&quot;除非你是我，才可与我常在&quot;&gt;&lt;a href=&quot;#除非你是我，才可与我常在&quot; class=&quot;headerlink&quot; title=&quot;除非你是我，才可与我常在&quot;&gt;&lt;/a&gt;除非你是我，才可与我常在&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;　　夜深人静的时候才会思绪万千，借最近难得的清闲并清醒的时光补上2013年欠下的一个总结。&lt;br&gt;　　2013年对我而言是意义重大，变化很多的一年。这一年我从学校走了出来，一个人到了一个全新的城市开始一段生活，遇到了很多很可爱的人，终于能够经济独立了，还体验了一阵老夫聊发少
    
    </summary>
    
    
      <category term="年终总结" scheme="http://qop.github.io/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>产品与UED</title>
    <link href="http://qop.github.io/2013/12/09/2013/12-09/"/>
    <id>http://qop.github.io/2013/12/09/2013/12-09/</id>
    <published>2013-12-08T16:00:00.000Z</published>
    <updated>2016-02-23T08:13:08.000Z</updated>
    
    <content type="html">&lt;p&gt;　　产品用户体验的保证，当然，我指的是用户产品，主要来自UED，但是有时候UED资源不是那么多，这样是否可以产品和前端进行消化呢。&lt;br&gt;　　这样的设计在体验上自然是不如专业的ued同学的，但是从流程上少了一环，基本上一个产品功能的实现可以体验一个工作日上线。而且，沟通成本的削减还会造成总工作量上的削减，牺牲的是部分用户体验，带来的是更快的迭代。&lt;br&gt;　　在总用户量不太大的情况下，这样的牺牲其实是很小的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　产品用户体验的保证，当然，我指的是用户产品，主要来自UED，但是有时候UED资源不是那么多，这样是否可以产品和前端进行消化呢。&lt;br&gt;　　这样的设计在体验上自然是不如专业的ued同学的，但是从流程上少了一环，基本上一个产品功能的实现可以体验一个工作日上线。而且，沟通成本
    
    </summary>
    
    
      <category term="UED" scheme="http://qop.github.io/tags/UED/"/>
    
      <category term="互联网" scheme="http://qop.github.io/tags/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
      <category term="产品" scheme="http://qop.github.io/tags/%E4%BA%A7%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>DP前端开发</title>
    <link href="http://qop.github.io/2013/10/31/2013/10-31/"/>
    <id>http://qop.github.io/2013/10/31/2013/10-31/</id>
    <published>2013-10-30T16:00:00.000Z</published>
    <updated>2016-03-25T07:32:35.000Z</updated>
    
    <content type="html">&lt;p&gt;针对预约预定的同学在前端开发中所提出的一些疑问，做了一些整理，希望对大家有帮助。&lt;/p&gt;
&lt;p&gt;一. 如何新建一个前端项目&lt;/p&gt;
&lt;p&gt;1.创建仓库.&lt;/p&gt;
&lt;p&gt;在code.dianpingoa.com上创建前端项目，namespace选 f2e。&lt;/p&gt;
&lt;p&gt;项目命名一般有如下不成文规定：&lt;/p&gt;
&lt;p&gt;前端项目都以 -static结尾&lt;/p&gt;
&lt;p&gt;面向用户的项目以    业务名称-static 命名，如 booking-static, tuangou-static&lt;/p&gt;
&lt;p&gt;商户中心的项目以    bc-业务名称-static命名，如bc-booking-static&lt;/p&gt;
&lt;p&gt;移动的项目以            m-业务名称-static命名，如m-booking-static&lt;/p&gt;
&lt;p&gt;2.项目的目录结构&lt;/p&gt;
&lt;p&gt;–js js目录&lt;/p&gt;
&lt;p&gt;–css css目录&lt;/p&gt;
&lt;p&gt;—–img css中用到的背景图目录&lt;/p&gt;
&lt;p&gt;–.cortex ci配置目录&lt;/p&gt;
&lt;p&gt;—–package.json 配置文件&lt;/p&gt;
&lt;p&gt;其他几个目录都很清晰，重点介绍下 package.json&lt;/p&gt;
&lt;p&gt;package.json 是给ci的配置文件，用来配置哪些目录需要部署到测试和线上，以及部署到什么位置。&lt;/p&gt;
&lt;p&gt;以booking-static为例：&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;dirs&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot;&lt;span class=&quot;attribute&quot;&gt;dir&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;css/&quot;&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot;&lt;span class=&quot;attribute&quot;&gt;to&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;/s/c/app/booking&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot;&lt;span class=&quot;attribute&quot;&gt;dir&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;img/&quot;&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot;&lt;span class=&quot;attribute&quot;&gt;to&lt;/span&gt;&quot;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;/s/i/app/booking&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot;&lt;span class=&quot;attribute&quot;&gt;dir&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;js/&quot;&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot;&lt;span class=&quot;attribute&quot;&gt;to&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;/s/j/app/booking&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;css目录下的文件a.css，最终会发布到&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#10;```&amp;#60;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;&amp;#60;@ava.staticResource resource=&amp;#34;/s/c/app/booking/a.css&amp;#34; /&amp;#62;&amp;#34; type=&amp;#34;text/css&amp;#34; /&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3.ci 配置&lt;/p&gt;
&lt;p&gt;找scm的王静发配置 alpha, beta, product 3个ci即可, 名称为 (alpha/beta/product)-仓库名，例如&lt;code&gt;alpha-booking-static&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4.button配置&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;!https://docs.google.com/a/dianping.com/spreadsheet/ccc?key=0AqA6J_cKUVL8dHc2N3VpUXlWMEdHS0gxc3lobVROR2c#gid=0&quot;&gt;这里&lt;/a&gt;填写下申请，参照其他静态项目即可&lt;/p&gt;
&lt;p&gt;二.上线，缓存，版本相关问题&lt;/p&gt;
&lt;p&gt;1.线上文件为什么需要版本号？&lt;/p&gt;
&lt;p&gt;把最新的文件上传到服务器上不就可以了吗,为什么要版本号？&lt;/p&gt;
&lt;p&gt;一次页面的请求，会有几十个静态文件请求，包括css，js，image等，如果web服务器有1000的qps，那么静态文件服务器就需要有50w qps，所以静态文件都会有一种叫做CDN(Content Delivery Network)的东西。简单来说，他将一个静态文件请求的内容缓存在CDN节点中，避免用户直接访问源服务器，减少服务器的压力。&lt;/p&gt;
&lt;p&gt;当服务器的静态文件更新后，CDN上的内容还是老的，用户访问到的内容还是老的，所以会在文件的url上带一个版本号，使文件的url改变，让CDN做一次回源，以更新CDN的文件内容。&lt;/p&gt;
&lt;p&gt;2.如何升级版本号&lt;/p&gt;
&lt;p&gt;当静态文件发布后，会为每个文件按文件内容生成一个MD5版本号，保存在数据库中。&lt;/p&gt;
&lt;p&gt;每个web服务器会有一个本地缓存来缓存这些版本号。&lt;/p&gt;
&lt;p&gt;一般上线的步骤是先发布静态文件，然后再发布web应用，原因是上线完静态文件后，数据库版本号更新，但是本地缓存没有更新，当应用灰度发布的时候会一台台重启，本地缓存就会自动清除。&lt;/p&gt;
&lt;p&gt;如果没有按这个顺序，就需要在button上手动清除一下缓存。&lt;/p&gt;
&lt;p&gt;3.如何排查静态文件没有更新的问题&lt;/p&gt;
&lt;p&gt;2个常识：去掉url上的.min可以查看不压缩的代码，url加一堆乱七八糟的querystring，可以让CDN回源&lt;/p&gt;
&lt;p&gt;1.打开beta.ci.dp , 查看 product-你的项目的构建信息，查看对应的文件打包信息中的版本号，和线上访问的版本号是否一致，如果一致，看2. 如果不一致 看3.&lt;/p&gt;
&lt;p&gt;2.去掉.min，查看不压缩的代码，如果文件内容是最新的，呼叫运维（付华)，手动更新CDN，如果不是最新的，一定是你的代码没合并。&lt;/p&gt;
&lt;p&gt;3.打包的版本号和线上版本号不一致，那么多半是缓存的原因，清缓存，如果还没有效果，继续..&lt;/p&gt;
&lt;p&gt;4.到这一步都没效果，那么问题应该是数据库读库和写库不同步，读库不是最新的版本号，那么call dba（兽老师）查看数据库同步问题。&lt;/p&gt;
&lt;p&gt;三.常用的开发工具，插件&lt;/p&gt;
&lt;p&gt;1.chrome开发者工具&lt;/p&gt;
&lt;p&gt;最常用的开发工具，看这个ppt，非常涨姿势&lt;a href=&quot;http://www.igvita.com/slides/2012/devtools-tips-and-tricks/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.igvita.com/slides/2012/devtools-tips-and-tricks/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.代理工具&lt;/p&gt;
&lt;p&gt;windows下面fiddler ，可以写正则，代理整个文件夹到本地目录。&lt;/p&gt;
&lt;p&gt;mac/linux下，我习惯用hrt，&lt;a href=&quot;https://github.com/tudouui/hrt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/tudouui/hrt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3.浏览器插件&lt;/p&gt;
&lt;p&gt;cookie，switchysharp&lt;/p&gt;
&lt;p&gt;差不多这些就够用了&lt;/p&gt;
&lt;p&gt;四.Neuron框架相关。&lt;/p&gt;
&lt;p&gt;API 文档 &lt;a href=&quot;http://neuron.f2e.dp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://neuron.f2e.dp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;框架大致包含这几部分：&lt;/p&gt;
&lt;p&gt;1.语言增强：&lt;/p&gt;
&lt;p&gt;Array.prototype&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;indexOf&lt;/li&gt;
&lt;li&gt;lastIndexOf&lt;/li&gt;
&lt;li&gt;filter&lt;/li&gt;
&lt;li&gt;forEach&lt;/li&gt;
&lt;li&gt;every&lt;/li&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;some&lt;/li&gt;
&lt;li&gt;reduce&lt;/li&gt;
&lt;li&gt;reduceRight&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Object&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create&lt;/li&gt;
&lt;li&gt;keys&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;String.prototype&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;trim&lt;/li&gt;
&lt;li&gt;trimLeft&lt;/li&gt;
&lt;li&gt;trimRight&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为不支持ES5这些规范的浏览器实现了这些API，不清楚API是干什么的可以到 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.mozilla.org/zh-CN/&lt;/a&gt; 上查询，这些API可以大大简化开发，尤其是数组的那些，避免掉很多for循环，建议一定要看下！！&lt;/p&gt;
&lt;p&gt;2.Loader&lt;/p&gt;
&lt;p&gt;模块加载器，依赖管理，动态加载模块，使用DP.define([],function(){}) 定义模块，DP.require or DP.provide 加载模块，随便找个文件看看就知道了。&lt;/p&gt;
&lt;p&gt;loader的原理和机制说来话长，放到分享上面解释吧。。。&lt;/p&gt;
&lt;p&gt;3.DOM操作API&lt;/p&gt;
&lt;p&gt;最常用的DOM操作API，类似于jQuery, 在chrome的控制台输入 DP.DOM.prototype，可以看到所有DOM操作的API，比查文档快多了…&lt;/p&gt;
&lt;p&gt;4.一些常用工具函数&lt;/p&gt;
&lt;p&gt;例如 DP.data() , DP.ready() , DP.isArray等等，&lt;/p&gt;
&lt;p&gt;在控制台打DP, 就懂了&lt;/p&gt;
&lt;p&gt;这些是neuron.js所提供的&lt;/p&gt;
&lt;p&gt;5.其他常用的组件都以模块的形式按需加载，最常用的模块：&lt;/p&gt;
&lt;p&gt;io/ajax and io/jsonp    发起ajax请求&lt;/p&gt;
&lt;p&gt;dom/dimension 获取元素的大小，位置等，类似jquery的 .offset(), .width() ，API不太一样&lt;/p&gt;
&lt;p&gt;util/cookie cookie操作&lt;/p&gt;
&lt;p&gt;fx/core 动画组件，mootools的Fx模块&lt;/p&gt;
&lt;p&gt;switch/core 幻灯片组件&lt;/p&gt;
&lt;p&gt;会上面的这些，你就可以完成90%的业务需求了。&lt;/p&gt;
&lt;p&gt;五. 什么是bc-bootstrap&lt;/p&gt;
&lt;p&gt;一套商户中心的UI and js组件框架，看名字就知道，类似于大名鼎鼎的bootstrap，省去大量重构和js开发时间，神器！&lt;/p&gt;
&lt;p&gt;bootstrap.fb.dp/&lt;/p&gt;
&lt;p&gt;上面有详细的说明&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;针对预约预定的同学在前端开发中所提出的一些疑问，做了一些整理，希望对大家有帮助。&lt;/p&gt;
&lt;p&gt;一. 如何新建一个前端项目&lt;/p&gt;
&lt;p&gt;1.创建仓库.&lt;/p&gt;
&lt;p&gt;在code.dianpingoa.com上创建前端项目，namespace选 f2e。&lt;/p&gt;
&lt;p&gt;项目
    
    </summary>
    
    
      <category term="DP" scheme="http://qop.github.io/tags/DP/"/>
    
      <category term="前端" scheme="http://qop.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript异步编程</title>
    <link href="http://qop.github.io/2013/10/21/2013/10-30/"/>
    <id>http://qop.github.io/2013/10/21/2013/10-30/</id>
    <published>2013-10-20T16:00:00.000Z</published>
    <updated>2016-03-25T07:34:04.000Z</updated>
    
    <content type="html">&lt;p&gt;为了清晰和可维护性，努力组织异步代码。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;深入理解JavaScript事件&lt;br&gt;JavaScript事件处理器在线程空闲之前不会运行。而是加入到事件队列中，待线程空闲之后再选取执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;setTimeout / setInterval是不精确的计时函数，延迟比较粗糙&amp;gt;4ms。&lt;/p&gt;
&lt;p&gt;node中可以使用process.nextTick&lt;br&gt;现代浏览器方法：requestAnimationFrame&lt;/p&gt;
&lt;p&gt;异步函数：调用一个函数时，程序只在该函数返回之后才能继续。&lt;br&gt;异步递归需谨慎使用，应该使用回调。&lt;/p&gt;
&lt;p&gt;嵌套回调诱惑我们通过添加更多代码来添加更多特性，而不是将这些特性实现为可管理、可重用的代码片段。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;分布式事件&lt;br&gt;PubSub(Publish/Subscribe)发布/订阅模式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;EventEmitter（事件发生器）对象，nodejs&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Promise对象和Deferred对象&lt;br&gt;jQuery 1.5+，所有ajax函数都会返回Promise对象。——封装性&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;❤『温馨提示50字』的Promise重构。&lt;br&gt;&lt;a href=&quot;http://api.jquery.com/category/deferred-object/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://api.jquery.com/category/deferred-object/&lt;/a&gt;&lt;br&gt;$.Deferred&lt;br&gt;deferred.resolve(), deferred.reject()&lt;br&gt;deferred.promise()&lt;br&gt;deferred.pipe()&lt;br&gt;$.when()&lt;br&gt;deferred.done().fail().always()&lt;br&gt;deferred.then(doneCallbacks, failCallbacks)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Async.js的工作流控制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;worker对象的多线程技术&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;异步的脚本加载&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;为了清晰和可维护性，努力组织异步代码。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;深入理解JavaScript事件&lt;br&gt;JavaScript事件处理器在线程空闲之前不会运行。而是加入到事件队列中，待线程空闲之后再选取执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;setTimeout / setIn
    
    </summary>
    
    
      <category term="前端" scheme="http://qop.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="读书笔记" scheme="http://qop.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
